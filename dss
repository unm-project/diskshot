#!/bin/bash
#######################
##  DISKSHOT Utility ##
#######################

# Check if dialog is installed
if ! command -v dialog &> /dev/null; then
    echo "Error: dialog is not installed. Please install it to use this script."
    exit 1
fi

BACKUP_DIR="/var/dss"
sudo mkdir -p "$BACKUP_DIR" || { error "Failed to create backup directory"; exit 1; }


# ANSI color codes
BOLD='\e[1m'
GREEN='\e[32m'
RED='\e[31m'
RESET='\e[0m'

info() {
    echo -e "${BOLD}${GREEN}=>${RESET} $1"
}
error() {
    echo -e "${BOLD}${RED}=>${RESET} $1"
}
snap() {
    if [[ -z "$1" || -z "$2" ]]; then
        info "Usage: snap <source_directory> <backup_name>"
        return 1
    fi

    if [[ ! -d "$1" ]]; then
        error "Error: Source directory '$1' does not exist."
        return 1
    fi

    # Check disk space before backup
    available_space=$(df "$BACKUP_DIR" | tail -1 | awk '{print $4}')
    if (( available_space < 1024000 )); then  # Check for ~1GB of space
        error "Not enough disk space available for the backup."
        return 1
    fi

    timestamp=$(date +"%H%M.%d%m%Y")
    backup_file="$BACKUP_DIR/$2-$timestamp.cpio.zst"

    # Perform the snapshot
    if find "$1" -depth -print0 | cpio -ocv0 | zstd -o "$backup_file"; then
        info "Snapshot created: $backup_file"
    else
        error "Error creating snapshot."
        return 1
    fi
}
rootsnap() {
    snap "/" "$1"
}
rootsnap_fancy() {
    if dialog --yesno "Are you sure you want to Backup the Root Directory? This may take a few gigabytes." 15 50; then
        backup_name=$(dialog --inputbox "Enter a name for your Backup" 15 50)
        rootsnap "$backup_name" 
    else
        info "Operation Aborted"
    fi
}
homesnap() {
    snap "$HOME" "$1"
}
homesnap_fancy() {
    if dialog --yesno "Are you sure you want to Backup the Home Directory? This may take a few gigabytes." 15 50; then
        backup_name=$(dialog --inputbox "Enter a name for your Backup:" 15 50)
        homesnap "$backup_name"
    else
        info "Operation Aborted"
    fi
}

fancy_menu() {
    dialog --clear --title "DISKSHOT" \
    --menu "Choose an option:" 15 50 4 \
    1 "Backup the Root Filesystem" \
    2 "Backup the Home Directory" \
    3 "Backup a Custom Directory" \
    4 "Exit" 2>temp.txt

    # Read the selected option
    choice=$(<temp.txt)

    case $choice in
        1) rootsnap_fancy ;;
        2) homesnap_fancy ;;
        3) 
            custom_dir=$(dialog --inputbox "Enter the desired directory" 15 50)
            backup_name=$(dialog --inputbox "Enter a name for your Backup" 15 50)
            snap "$custom_dir" "$backup_name" ;;
        4) exit 0 ;;
        *) error "Invalid option" ;;
    esac

    # Cleanup
    rm -f temp.txt
}

restore() {
    foldertr="$1"
    backup_file="$2"

    if [[ ! -f "$backup_file" ]]; then
        error "Backup file '$backup_file' does not exist."
        return 1
    fi

    info "Extracting the Backup"
    if ! sudo zstd -d "$backup_file" -o /var/dss/extract.cpio; then
        error "Error decompressing the backup file."
        return 1
    fi

    # Extract to temporary directory before moving
    temp_dir=$(mktemp -d)
    if ! sudo cpio -id -D "$temp_dir" < /var/dss/extract.cpio; then
        error "Error extracting the backup."
        return 1
    fi

    # Move to target directory
    sudo mv "$temp_dir"/* "$foldertr/"
    info "Backup restored to $foldertr"
    sudo rm -rf /var/dss/extract.cpio "$temp_dir"
}
help() {
    echo "DISKSHOT Utility"
    echo "Take snapshots of the system."
    echo "Version: 0.9"
    echo "Usage: dss <command> <args>"
    echo "Commands:"
    echo "  snap <type> <name>       - Create a backup"
    echo "  restore <file> <folder>  - Restore a backup file"
    echo "Types for snap:"
    echo "  root                      - Backup the root filesystem"
    echo "  home                      - Backup the home directory"
    echo "  <custom>                 - Backup a specified directory"
    echo "DISKSHOT is part of the UNM Suite of Tools."
    echo "Licensed under MIT License."
}

if [ "$1" = "snap" ]; then
    if [ "$2" = "root" ]; then
        rootsnap "$3"
    elif [ "$2" = "home" ]; then
        homesnap "$3"
    else
        snap "$3" "$4"
    fi
elif [ "$1" = "help" ]; then
    help
elif [ "$1" = "menu" ]; then
    fancy_menu
elif [ "$1" = "restore" ]; then
    restore "$1" "$2"

else
    error "Usage: dss <snap|help|menu> <type> <name>"
fi
